TRAVERSAL IN DOUBLY LINKED LISTS

1. Traverse the Linked List (Forward)  
   Algorithm:  
     1. Start from the head node.  
     2. While the current node is not NULL:  
         - Process the data of the current node (e.g., print it).  
         - Move to the next node by updating the pointer to `current = current->next`.  
   Time Complexity: O(N) (where N is the number of nodes in the list)  
   Space Complexity: O(1)  

2. Traverse the Linked List (Backward)  
   Algorithm:  
     1. Start from the tail node.  
     2. While the current node is not NULL:  
         - Process the data of the current node (e.g., print it).  
         - Move to the previous node by updating the pointer to `current = current->prev`.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

----------------------------------------------------

INSERTIING A NODE

1. Insert at the Beginning  
   Algorithm:  
     1. Create a new node with the given data.  
     2. If the list is empty (`head == NULL`):  
         - Set `head = newNode` and `tail = newNode`.  
         - Update `newNode->next = NULL` and `newNode->prev = NULL`.  
     3. Else:  
         - Set `newNode->next = head`.  
         - Set `head->prev = newNode`.  
         - Update `head = newNode`.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

2. Insert at the End  
   Algorithm:  
     1. Create a new node with the given data.  
     2. If the list is empty (`head == NULL`):  
         - Set `head = newNode` and `tail = newNode`.  
         - Update `newNode->next = NULL` and `newNode->prev = NULL`.  
     3. Else:  
         - Set `tail->next = newNode`.  
         - Set `newNode->prev = tail`.  
         - Update `tail = newNode`.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

3. Insert at a Specific Position  
   Algorithm:  
     1. Traverse the list to find the desired position.  
     2. Create a new node with the given data.  
     3. Update pointers:  
         - Set `newNode->next = current->next`.  
         - Set `current->next->prev = newNode`.  
         - Set `current->next = newNode`.  
         - Set `newNode->prev = current`.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

4. Insert After a Given Node  
   Algorithm:  
     1. Find the node after which insertion is required.  
     2. Create a new node with the given data.  
     3. Update pointers:  
         - Set `newNode->next = givenNode->next`.  
         - If `givenNode->next` is not NULL, update `givenNode->next->prev = newNode`.  
         - Set `givenNode->next = newNode`.  
         - Set `newNode->prev = givenNode`.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

5. Insert Before a Given Node  
   Algorithm:  
     1. Find the node before which insertion is required.  
     2. Create a new node with the given data.  
     3. Update pointers:  
         - Set `newNode->prev = givenNode->prev`.  
         - If `givenNode->prev` is not NULL, update `givenNode->prev->next = newNode`.  
         - Set `givenNode->prev = newNode`.  
         - Set `newNode->next = givenNode`.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

------------------------------------------------

DELETING A NODE

1. Delete from the Beginning  
   Algorithm:  
     1. If the list is empty (`head == NULL`):  
         - Return; there is nothing to delete.  
     2. Update `head = head->next`.  
     3. If `head` is not NULL, set `head->prev = NULL`.  
     4. If `head == NULL`, set `tail = NULL`.  
     5. Free the memory of the deleted node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

2. Delete from the End  
   Algorithm:  
     1. If the list is empty (`head == NULL`):  
         - Return; there is nothing to delete.  
     2. Update `tail = tail->prev`.  
     3. If `tail` is not NULL, set `tail->next = NULL`.  
     4. If `tail == NULL`, set `head = NULL`.  
     5. Free the memory of the deleted node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

3. Delete from a Specific Position  
   Algorithm:  
     1. Traverse the list to find the desired position.  
     2. Update pointers:  
         - Set `current->prev->next = current->next`.  
         - Set `current->next->prev = current->prev`.  
     3. Free the memory of the deleted node.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

4. Delete After a Given Node  
   Algorithm:  
     1. Find the node after which deletion is required.  
     2. If `givenNode->next` is NULL, return; nothing to delete.  
     3. Update pointers:  
         - Set `givenNode->next = givenNode->next->next`.  
         - If `givenNode->next` is not NULL, update `givenNode->next->prev = givenNode`.  
     4. Free the memory of the deleted node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

5. Delete Before a Given Node  
   Algorithm:  
     1. Find the node before which deletion is required.  
     2. If `givenNode->prev` is NULL, return; nothing to delete.  
     3. Update pointers:  
         - Set `givenNode->prev = givenNode->prev->prev`.  
         - If `givenNode->prev` is not NULL, update `givenNode->prev->next = givenNode`.  
     4. Free the memory of the deleted node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

----------------------------------------------------

REVERSE A DOUBLY LINKED LIST

1. Initialize Variables  
   - Start with the head of the list (`current = head`).  
   - Maintain a temporary pointer `temp` to assist in swapping nodes.  

2. Traverse and Swap  
   - While `current != NULL`:  
     - Swap `current->next` and `current->prev` using `temp`.  
       temp = current->next;
       current->next = current->prev;
       current->prev = temp;
     - Move to the previous node (which is now the next node after swapping):  
       current = temp;

3. Update the Head  
   - After the loop ends, set the head of the list to the last node traversed:  
     if (temp != NULL) 
         head = temp->prev;

Time Complexity  
- O(N), where N is the number of nodes in the list.  

Space Complexity  
- O(1), as no extra space is used apart from temporary variables.


--------------------------------------------------------------------------


1) DELETE ALL NODES WITH A GIVEN KEY VALUE IN A DOUBLY LINKED LIST

Approach

1. Traverse the List
   - Start from the head and iterate through the list.

2. Identify Nodes with the Given Key
   - If `current->data == key`, delete the node.

3. Deletion Steps
   - If the node is the head, update the head.
   - If the node has a previous node, update `prev->next`.
   - If the node has a next node, update `next->prev`.
   - Free the node and move to the next one.

4. Edge Cases
   - The list is empty.
   - The key is not present in the list.
   - All nodes contain the key.

5. Time Complexity
   - O(N), as we traverse the list once.

6. Space Complexity
   - O(1), since no extra space is used.

--------------------------------------------------

2) FIND PAIRS WITH A GIVEN SUM IN A DOUBLY LINKED LIST

Brute Force Approach

1. Use Nested Loops
   - Pick each node and check for a complement that sums to the target.

2. Time Complexity
   - O(NÂ²), as each node is compared with every other node.

3. Space Complexity
   - O(1), as no extra space is used.


Optimal Approach (Using Two Pointers)

1. Find Left and Right Pointers
   - Set `left` to the head.
   - Set `right` to the last node (tail).

2. Use Two-Pointer Technique
   - If `left->data + right->data == target`, store the pair and move both pointers.
   - If the sum is less than `target`, move `left` forward.
   - If the sum is greater than `target`, move `right` backward.

3. Edge Cases
   - List is empty or has only one node.
   - No valid pairs exist.

4. Time Complexity
   - O(N), since each node is visited at most once.

5. Space Complexity
   - O(1), since only two pointers are used.

---------------------------------------------------

3) REMOVE DUPLICATES FROM A DOUBLY LINKED LIST

Approach (For Sorted Doubly Linked List)

1. Traverse the List
   - Start from the head and check for consecutive duplicate nodes.

2. Delete Duplicates
   - If `current->data == current->next->data`:
     - Update `current->next` to skip the duplicate.
     - Update `next->prev` to maintain the doubly linked structure.
     - Free the duplicate node.

3. Edge Cases
   - The list is empty or has only one node.
   - No duplicates exist in the list.

4. Time Complexity
   - O(N), since we traverse the list once.

5. Space Complexity
   - O(1), as no extra space is used.


Approach (For Unsorted Doubly Linked List)

1. Use Hashing
   - Traverse the list while storing seen values in a HashSet.
   - If a duplicate is found, delete the node.

2. Time Complexity
   - O(N), since we traverse the list once.

3. Space Complexity
   - O(N), due to extra storage in the HashSet.
