1) REVERSE NODES IN K-GROUPS IN A DOUBLY LINKED LIST

Brute Force Approach

1. Store Nodes in an Array
   - Traverse the list and store all node addresses in an array.

2. Reverse in Groups
   - Iterate through the array in groups of `k`, reversing the connections manually.

3. Reconnect the List
   - Update `next` and `prev` pointers for all nodes after reversing.

4. Edge Cases
   - If `k == 1`, no reversal is needed.
   - If the list has fewer than `k` nodes, return as is.

5. Time Complexity
   - O(N), as we traverse and process each node once.

6. Space Complexity
   - O(N), due to storing all node addresses in an array.


Optimal Approach (In-Place Reversal)

1. Traverse and Count Nodes
   - Count the number of nodes to check if k-group reversal is possible.

2. Reverse k Nodes Iteratively
   - For each group of `k` nodes:
     - Swap `next` and `prev` pointers within the group.
     - Update `prev_group_tail->next` to connect groups.
   - Move to the next group.

3. Handle Remaining Nodes
   - If the remaining nodes are less than `k`, keep them as is.

4. Edge Cases
   - The list has fewer than `k` nodes.
   - `k == 1`, meaning no change.
   - The list is empty.

5. Time Complexity
   - O(N), as each node is visited once.

6. Space Complexity
   - O(1), since reversal is done in place.

----------------------------------------------------------

2) ROTATE A LINKED LIST BY K TIMES

Brute Force Approach

1. Rotate One Node at a Time
   - For each of the `k` rotations:
     - Traverse to the last node.
     - Make the last node the new head and update pointers.

2. Time Complexity
   - O(k * N), since we traverse the list `k` times.

3. Space Complexity
   - O(1), as no extra space is used.


Optimal Approach

1. Find the Length
   - Traverse the list to get the total number of nodes (`N`).

2. Optimize k
   - Since rotating `N` times results in the same list, update `k = k % N`.

3. Find the New Head
   - Traverse to the `(N-k)th` node.
   - Update its `next` to NULL (new tail).
   - The next node becomes the new head.

4. Update the Last Node
   - Connect the last node to the old head.

5. Time Complexity
   - O(N), as we traverse the list only twice.

6. Space Complexity
   - O(1), since rotation is done in place.

---------------------------------------------------------

3) MERGE TWO SORTED LINKED LISTS

Brute Force Approach

1. Store Nodes in an Array
   - Traverse both lists and store all nodes in an array.

2. Sort the Array
   - Sort the array based on node values.

3. Reconstruct the Linked List
   - Reconnect the nodes in sorted order.

4. Time Complexity
   - O(N log N), due to sorting.

5. Space Complexity
   - O(N), as extra space is used for the array.


Optimal Approach (Two-Pointer Method)

1. Initialize Pointers
   - Use two pointers (`l1` and `l2`) for both lists.
   - Create a dummy node to store the result.

2. Merge Step
   - Compare `l1->data` and `l2->data`:
     - Append the smaller node to the result list.
     - Move the pointer forward in the selected list.
   - Continue until one list is fully traversed.

3. Append Remaining Nodes
   - If any nodes are left in `l1` or `l2`, append them.

4. Time Complexity
   - O(N), as each node is visited once.

5. Space Complexity
   - O(1), as merging is done in place.

-----------------------------------------------------------

4) FLATTEN A LINKED LIST

Brute Force Approach

1. Store All Nodes in an Array
   - Traverse all `next` and `bottom` pointers.
   - Store all nodes in an array.

2. Sort the Array
   - Sort the array based on node values.

3. Reconstruct the List
   - Link all nodes sequentially using only the `bottom` pointer.
   - Set `next` pointers to NULL.

4. Time Complexity
   - O(N log N), due to sorting.

5. Space Complexity
   - O(N), for storing nodes in an array.


Optimal Approach (Merge with Divide & Conquer)

1. Recursively Flatten
   - Flatten the right (`next`) list first.

2. Merge Two Lists
   - Use the **merge two sorted lists** approach to merge the current nodeâ€™s `bottom` list with the already flattened right list.

3. Return the Merged List
   - Ensure all `next` pointers are set to NULL.

4. Time Complexity
   - O(N), since each node is visited once.

5. Space Complexity
   - O(1), since merging is done in place.

--------------------------------------------------

5) MERGE K SORTED LINKED LISTS

Brute Force Approach

1. Store All Nodes in an Array
   - Traverse all `k` lists and store all nodes in an array.

2. Sort the Array
   - Sort the array based on node values.

3. Reconstruct the List
   - Link all nodes sequentially.

4. Time Complexity
   - O(N log N), due to sorting (`N` is the total number of nodes).

5. Space Complexity
   - O(N), for storing nodes in an array.


Optimal Approach 1 (Min Heap / Priority Queue)

1. Push First Nodes into Min Heap
   - Use a min-heap (priority queue) to store the first node of each list.
   - Min-heap automatically keeps the smallest element at the top.

2. Extract Min and Add Next Node
   - Extract the smallest node from the heap.
   - Append it to the result list.
   - If the extracted node has a `next`, push it into the heap.

3. Continue Until Heap is Empty
   - Process all nodes until the heap is empty.

4. Time Complexity
   - O(N log K), where `K` is the number of lists.

5. Space Complexity
   - O(K), for storing `K` nodes in the heap.


Optimal Approach 2 (Divide & Conquer)

1. Pairwise Merge
   - Recursively merge two lists at a time.

2. Reduce Lists in Logarithmic Steps
   - Merge `K` lists into `K/2` lists, then `K/4`, and so on.

3. Continue Until One List Remains
   - The last merged list is the final sorted list.

4. Time Complexity
   - O(N log K), since we merge `K` lists in `log K` steps.

5. Space Complexity
   - O(1), as merging is done in place.

-------------------------------------------------------------

6) CLONE A LINKED LIST WITH RANDOM AND NEXT POINTERS

Brute Force Approach (Using Hash Map)

1. Create a Copy of Each Node
   - Traverse the original list and create a copy of each node.

2. Store Mapping in a Hash Map
   - Use a hash map to store the mapping between original and copied nodes.

3. Set Next and Random Pointers
   - Traverse the list again to assign `next` and `random` pointers using the hash map.

4. Time Complexity
   - O(N), as we traverse the list twice.

5. Space Complexity
   - O(N), for storing the mapping in a hash map.

Optimal Approach (O(1) Extra Space)

1. Insert Copied Nodes in Between
   - Traverse the list and create a copy of each node.
   - Insert each copied node right after the original node.

2. Set Random Pointers
   - Use the interleaved structure to assign the correct `random` pointers.

3. Separate the Two Lists
   - Restore the original list and extract the cloned list.

4. Time Complexity
   - O(N), as we traverse the list multiple times.

5. Space Complexity
   - O(1), as no extra data structures are used.

---------------------------------------------------
7) DESIGNING BROWSER HISTORY

Problem Statement:
   - Implement a browser history system that supports:
     1. Visiting a new URL.
     2. Going **back** a certain number of steps.
     3. Going **forward** a certain number of steps.

Brute Force Approach (Using Array/List)

1. Maintain an Array/List
   - Store visited URLs in an array.
   - Keep an index pointer to track the current page.

2. Back and Forward Operations
   - Move the index pointer accordingly.
   - If back steps exceed history, move to the first page.
   - If forward steps exceed available pages, move to the last page.

3. Time Complexity
   - O(1) for visiting a page.
   - O(1) for back/forward (simple index movement).

4. Space Complexity
   - O(N), where N is the number of visited pages.


Optimal Approach (Using Doubly Linked List)

1. Use a Doubly Linked List (DLL)
   - Each node represents a visited page.
   - `prev` and `next` pointers track back and forward history.

2. Visiting a New Page
   - If the user visits a new URL, remove all forward history.

3. Back and Forward Operations
   - Move left (`prev`) for back operation.
   - Move right (`next`) for forward operation.

4. Time Complexity
   - O(1) for visiting a page.
   - O(1) for back/forward operations.

5. Space Complexity
   - O(N), where N is the number of visited pages.

