TRAVERSAL

1. Traverse the Linked List  
   Algorithm:  
     1. Start from the head node.  
     2. While the current node is not NULL:  
         - Process the data of the current node (e.g., print it).  
         - Move to the next node by updating the pointer to `current = current->next`.  
   Time Complexity: O(N) (where N is the number of nodes in the list)  
   Space Complexity: O(1)  

---------------------------------------------------------

INSERTING A NODE

1. Insert at the Head  
   Algorithm:  
     1. Create a new node with the given value.  
     2. Point the `next` of the new node to the current head.  
     3. Update the head pointer to the new node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

-----------------------------------------------------------

2. Insert at the Tail  
   Algorithm:  
     1. Create a new node with the given value.  
     2. Traverse the list to find the last node.  
     3. Point the `next` of the last node to the new node.  
     4. Update the `next` of the new node to NULL.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

-----------------------------------------------------------

3. Insert at a Given Position (1-based index)  
   Algorithm:  
     1. Create a new node with the given value.  
     2. Traverse the list to find the (pos - 1)-th node.  
     3. Update the `next` of the new node to point to the `next` of (pos - 1)-th node.  
     4. Update the `next` of the (pos - 1)-th node to point to the new node.  
   Time Complexity: O(Pos)  
   Space Complexity: O(1)  

-----------------------------------------------------------

4. Insert After a Given Node  
   Algorithm:  
     1. Create a new node with the given value.  
     2. Update the `next` of the new node to point to the `next` of the given node.  
     3. Update the `next` of the given node to point to the new node.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

-----------------------------------------------------------

5. Insert Before a Given Node  
   Algorithm:  
     1. Traverse the list to find the node just before the given node.  
     2. Create a new node with the given value.  
     3. Update the `next` of the new node to point to the given node.  
     4. Update the `next` of the node found in step 1 to point to the new node.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

-----------------------------------------------------------

DELETING A NODE

1. Delete from the Head  
   Algorithm:  
     1. Check if the head is NULL (empty list). If yes, return.  
     2. Store the current head node in a temporary variable.  
     3. Update the head pointer to the `next` of the current head.  
     4. Free the memory of the temporary variable.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

-----------------------------------------------------------

2. Delete from the Tail  
   Algorithm:  
     1. Check if the head is NULL (empty list). If yes, return.  
     2. Traverse the list to find the second last node.  
     3. Update the `next` of the second last node to NULL.  
     4. Free the memory of the last node.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  

-----------------------------------------------------------

3. Delete from a Given Position (1-based index)  
   Algorithm:  
     1. Check if the head is NULL (empty list). If yes, return.  
     2. Traverse the list to find the (pos - 1)-th node.  
     3. Store the node to be deleted in a temporary variable.  
     4. Update the `next` of (pos - 1)-th node to the `next` of the node to be deleted.  
     5. Free the memory of the temporary variable.  
   Time Complexity: O(Pos)  
   Space Complexity: O(1)  

-----------------------------------------------------------

4. Delete After a Given Node  
   Algorithm:  
     1. Check if the given node or its `next` is NULL. If yes, return.  
     2. Store the node to be deleted (next of the given node) in a temporary variable.  
     3. Update the `next` of the given node to the `next` of the node to be deleted.  
     4. Free the memory of the temporary variable.  
   Time Complexity: O(1)  
   Space Complexity: O(1)  

-----------------------------------------------------------

5. Delete Before a Given Node  
   Algorithm:  
     1. Traverse the list to find the node just before the node preceding the given node.  
     2. Store the node to be deleted in a temporary variable.  
     3. Update the `next` of the node found in step 1 to point to the given node.  
     4. Free the memory of the temporary variable.  
   Time Complexity: O(N)  
   Space Complexity: O(1)  
