1) FINDING THE MIDDLE NODE OF A LINKED LIST

Brute Force Approach

1. Count the Nodes
   - Traverse the linked list and count the total number of nodes (`count`).

2. Traverse Again to the Middle
   - Traverse the list again, stopping at the middle node (`count / 2`).

3. Time Complexity
   - O(N), where N is the number of nodes.

4. Space Complexity
   - O(1), as no extra space is used.


Tortoise-Hare Method

1. Initialize Two Pointers
   - Use two pointers:
     - `slow` moves one step at a time.
     - `fast` moves two steps at a time.

2. Traverse the List
   - While `fast != NULL` and `fast->next != NULL`:
     - Move `slow` one step forward.
     - Move `fast` two steps forward.

3. Middle Node
   - When `fast` reaches the end, `slow` will point to the middle node.

4. Time Complexity
   - O(N), as the list is traversed once.

5. Space Complexity
   - O(1), as no extra space is used.

----------------------------------------------------

2) ADD TWO NUMBERS REPRESENTED BY LINKED LISTS

Brute Force Approach

1. Reverse Both Linked Lists
   - Reverse both input linked lists.
   
2. Add the Digits
   - Traverse both lists and add the digits, considering the carry.
   - Create a new list to store the result.
   
3. Reverse the Result
   - Reverse the result list before returning.

4. Time Complexity
   - O(N), where N is the maximum length of the two linked lists.

5. Space Complexity
   - O(N), where N is the number of digits in the result list.


Optimized Approach (Without Reversing the Lists)

1. Traverse Both Lists
   - Traverse both linked lists simultaneously.
   
2. Add Corresponding Digits
   - Add the digits from both lists and handle the carry.
   - If one list is shorter, consider its missing digits as 0.
   
3. Create the Result List
   - Add the sum to a new linked list.
   
4. Time Complexity
   - O(N), where N is the maximum length of the two linked lists.

5. Space Complexity
   - O(N), where N is the length of the result list.

-----------------------------------------------------------

3) ODD EVEN LINKED LIST

Brute Force Approach

1. Traverse the List and Separate Odd and Even Nodes
   - Traverse the linked list and separate the odd and even indexed nodes into two different lists.

2. Merge the Lists
   - Connect the tail of the odd list to the head of the even list.

3. Time Complexity
   - O(N), where N is the number of nodes.

4. Space Complexity
   - O(N), as extra space is used for storing even and odd lists.


Optimized Approach (One Pass)

1. Initialize Three Pointers
   - `odd` for the head of the odd indexed list.
   - `even` for the head of the even indexed list.
   - `evenHead` to store the head of the even list for later.

2. Traverse the List
   - Traverse the list and rearrange the pointers such that all odd-indexed nodes are grouped together, followed by the even-indexed nodes.

3. Merge the Lists
   - Connect the last odd node to the head of the even list.

4. Time Complexity
   - O(N), where N is the number of nodes.

5. Space Complexity
   - O(1), as no extra space is used.


----------------------------------------------------------------------

4) SORT A LINKED LIST OF 0s, 1s, AND 2s

Brute Force Approach

1. Traverse the List and Count the Occurrences
   - Traverse the linked list and count the occurrences of 0s, 1s, and 2s.

2. Reconstruct the List
   - Create a new linked list and append the correct number of 0s, 1s, and 2s in the correct order.

3. Time Complexity
   - O(N), where N is the number of nodes.

4. Space Complexity
   - O(N), as a new list is created to store the sorted nodes.


Optimized Approach (Three-Pointer Method)

1. Initialize Three Pointers and Dummy Nodes
   - Create three dummy nodes: `zero_head`, `one_head`, and `two_head`.
   - Create pointers `zero`, `one`, and `two` to manage these lists.

2. Traverse the List and Segregate Nodes
   - Traverse the linked list and place each node into one of the three lists based on its value.

3. Merge the Three Lists
   - Connect the tail of the 0s list to the head of the 1s list.
   - Connect the tail of the 1s list to the head of the 2s list.
   - Ensure the last node of the 2s list points to NULL.

4. Time Complexity
   - O(N), where N is the number of nodes.

5. Space Complexity
   - O(1), as no extra space is used apart from the dummy nodes.


Optimized Approach (Dutch National Flag Algorithm)

1. Initialize Three Pointers
   - `low`: points to the first element of the list, for 0s.
   - `mid`: points to the current element being processed.
   - `high`: points to the last element of the list, for 2s.

2. Traverse the List
   - While `mid` is less than or equal to `high`:
     - If `mid->data == 0`, swap `low` and `mid` and move both pointers forward.
     - If `mid->data == 1`, move `mid` forward.
     - If `mid->data == 2`, swap `mid` and `high` and move `high` backward.

3. Time Complexity
   - O(N), where N is the number of nodes.

4. Space Complexity
   - O(1), as no extra space is used.

----------------------------------------------------------

5) DELETE N-th NODE FROM THE END OF A LINKED LIST

Brute Force Approach

1. Count the Total Nodes
   - Traverse the linked list to count the total number of nodes (`count`).

2. Find the Node to Delete
   - The N-th node from the end is at position `(count - N + 1)` from the start.

3. Traverse Again and Delete
   - Traverse again to this position and delete the node.

4. Time Complexity
   - O(N), where N is the number of nodes.

5. Space Complexity
   - O(1), as no extra space is used.


Optimized Approach (Two-Pointer Method)

1. Initialize Two Pointers
   - `fast` and `slow`, both pointing to the head.

2. Move `fast` N Steps Ahead
   - Move `fast` N steps ahead.

3. Move Both Pointers Until `fast` Reaches the End
   - Move `slow` and `fast` one step at a time.
   - When `fast` reaches the last node, `slow` is at `(N+1)`-th node from the end.

4. Delete the N-th Node
   - Adjust the `next` pointer of `slow` to skip the N-th node.

5. Edge Case: If N is Equal to the Length of the List
   - If `fast` reaches NULL after moving N steps, delete the head node.

6. Time Complexity
   - O(N), as the list is traversed once.

7. Space Complexity
   - O(1), as no extra space is used.

----------------------------------------------------------

6) REVERSE A LINKED LIST (ITERATIVE & RECURSIVE)

Iterative Approach

1. Initialize Three Pointers
   - `prev` → Initially NULL (stores the previous node).
   - `curr` → Initially head (tracks the current node).
   - `next` → Stores `curr->next` before modifying it.

2. Traverse the List
   - While `curr` is not NULL:
     - Store `curr->next` in `next`.
     - Reverse the link: `curr->next = prev`.
     - Move `prev` and `curr` one step forward.

3. Update Head
   - The `prev` pointer will be at the new head after traversal.

4. Time Complexity
   - O(N), as each node is visited once.

5. Space Complexity
   - O(1), as no extra space is used.


Recursive Approach

1. Base Case
   - If `head` is NULL or only one node exists, return `head`.

2. Reverse the Rest of the List
   - Recursively call `reverse(head->next)`, which reverses all nodes after `head`.

3. Adjust Pointers
   - Set `head->next->next = head` to reverse the link.
   - Set `head->next = NULL` to prevent cycles.

4. Return the New Head
   - The last node becomes the new head.

5. Time Complexity
   - O(N), as each node is processed once.

6. Space Complexity
   - O(N), due to recursive call stack usage.

---------------------------------------------------------

7) CHECK IF A LINKED LIST IS A PALINDROME

Brute Force Approach (Using Extra Space)

1. Copy Elements to an Array
   - Traverse the linked list and store all values in an array.

2. Check for Palindrome
   - Use two pointers (`start` and `end`) to compare values from both ends.

3. Time Complexity
   - O(N), as we traverse the list once.

4. Space Complexity
   - O(N), since we use an extra array.


Optimized Approach (Using Reverse Half Method)

1. Find the Middle of the List
   - Use the **Tortoise-Hare method** to find the middle node.

2. Reverse the Second Half
   - Reverse the second half of the linked list.

3. Compare Both Halves
   - Compare the first half with the reversed second half.

4. Restore the Original List (Optional)
   - Reverse the second half back to restore the original list.

5. Time Complexity
   - O(N), as we traverse the list multiple times.

6. Space Complexity
   - O(1), since we only use a few extra pointers.


Optimized Approach (Using Stack)

1. Push First Half Elements to a Stack
   - Use **Tortoise-Hare method** to reach the middle.
   - Push elements from the first half onto a stack.

2. Compare Stack with the Second Half
   - Continue traversing the second half and compare with popped elements.

3. Time Complexity
   - O(N), as we traverse the list twice.

4. Space Complexity
   - O(N), since we use a stack.

-------------------------------------------------

8) ADD 1 TO A NUMBER REPRESENTED BY A LINKED LIST

Brute Force Approach (Using a Stack)

1. Push Digits into a Stack
   - Traverse the list and push all digits onto a stack.

2. Add 1 to the Last Digit
   - Pop elements from the stack and add 1 to the last digit.
   - Handle carry propagation.

3. Create a New Linked List
   - Construct a new linked list with updated digits.

4. Time Complexity
   - O(N), as we traverse the list twice.

5. Space Complexity
   - O(N), due to the extra stack.


Optimized Approach (Reverse, Add, and Reverse Back)

1. Reverse the Linked List
   - Reverse the linked list to process from the least significant digit.

2. Add 1 to the First Node
   - Start adding 1 from the first node.
   - Handle carry propagation.

3. Reverse the List Back
   - Reverse again to restore the original order.

4. Edge Case: Carry at the Last Node
   - If there's a carry after the last node, create a new head node with `1`.

5. Time Complexity
   - O(N), as we traverse the list multiple times.

6. Space Complexity
   - O(1), since we only use extra pointers.


Most Optimal Approach (Using Recursion)

1. Base Case
   - If `head` is NULL, return 1 (carry).

2. Recursively Add 1 to the Next Node
   - Call `addOne(head->next)` and store the returned carry.

3. Update Current Node
   - Add carry to `head->data`.
   - If `head->data` becomes 10, set it to 0 and return a carry of 1.

4. Handle Carry at the First Node
   - If a carry remains after recursion, insert a new node at the beginning.

5. Time Complexity
   - O(N), as each node is visited once.

6. Space Complexity
   - O(N), due to the recursive call stack.


9) FIND INTERSECTION OF TWO LINKED LISTS

Brute Force Approach (Using Nested Loops)

1. Traverse List A
   - For each node in List A, traverse List B and check if any node matches.

2. If a Match is Found
   - The intersection node is found.

3. Time Complexity
   - O(N * M), where N and M are the lengths of the two lists.

4. Space Complexity
   - O(1), since no extra space is used.


Optimized Approach (Using Hashing)

1. Store Nodes of One List in a HashSet
   - Traverse List A and store its nodes in a HashSet.

2. Traverse List B
   - For each node in List B, check if it exists in the HashSet.

3. If a Match is Found
   - That is the intersection node.

4. Time Complexity
   - O(N + M), as we traverse both lists once.

5. Space Complexity
   - O(N), for storing List A’s nodes in a HashSet.


Most Optimal Approach (Using Two Pointers)

1. Find the Lengths of Both Lists
   - Traverse both lists to find their lengths.

2. Align the Starting Points
   - Move the pointer of the longer list ahead by the length difference.

3. Traverse Both Lists Simultaneously
   - Move both pointers one step at a time until they meet.

4. Intersection Node
   - If they meet, return the intersection node.
   - If no intersection exists, return NULL.

5. Time Complexity
   - O(N + M), as we traverse both lists once.

6. Space Complexity
   - O(1), since only two pointers are used.


10) FIND AND DELETE THE MIDDLE NODE OF A LINKED LIST

Brute Force Approach (Two Passes)

1. Count the Nodes
   - Traverse the list and count the total number of nodes (`count`).

2. Traverse Again to the Middle
   - Traverse the list again up to `(count / 2) - 1` position.
   - Update the `next` pointer of the previous node to skip the middle node.

3. Edge Cases
   - If the list has only one node, return NULL.

4. Time Complexity
   - O(N), since the list is traversed twice.

5. Space Complexity
   - O(1), as no extra space is used.


Optimized Approach (Using Two Pointers - Tortoise-Hare Method)

1. Initialize Two Pointers
   - `slow` moves one step at a time.
   - `fast` moves two steps at a time.
   - Maintain a `prev` pointer to track the node before `slow`.

2. Traverse the List
   - Move `slow` and `fast` until `fast` reaches the end.

3. Delete the Middle Node
   - Update `prev->next = slow->next` to remove the middle node.

4. Edge Cases
   - If the list has only one node, return NULL.

5. Time Complexity
   - O(N), as the list is traversed once.

6. Space Complexity
   - O(1), since only extra pointers are used.
