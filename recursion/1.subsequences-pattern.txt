1) GENERATE ALL SUBSEQUENCES

Problem Statement  
- Given a string or array, generate all possible subsequences (subsets while maintaining order).

Brute Force Approach (Using Bit Manipulation)

1. Generate All Binary Masks
   - There are `2^N` possible subsequences.
   - Each bit represents whether to include an element.

2. Construct Subsequences
   - Iterate over all `2^N` combinations.
   - If the `i-th` bit is set, include the corresponding element.

3. Time Complexity
   - O(N * 2^N), as we generate `2^N` subsets, each taking O(N) time.

4. Space Complexity
   - O(1) (excluding output storage).


Optimal Approach (Using Recursion)

1. Recursive Function  
   - At each step, decide whether to include the current element.

2. Base Case  
   - When we reach the end of the string/array, store the current subsequence.

3. Recursive Calls  
   - Include the current element and recurse.
   - Exclude the current element and recurse.

4. Time Complexity  
   - O(2^N), as each element has two choices.

5. Space Complexity  
   - O(N), due to recursive call stack.

-------------------------------------------------------------------

2) COUNT SUBSEQUENCES WITH SUM K

Problem Statement  
- Given an array and an integer K, find the number of subsequences whose sum is exactly K.

Brute Force Approach (Using Power Set)

1. Generate All Subsequences  
   - Use bit manipulation or recursion to generate all subsequences.

2. Check Sum Condition  
   - For each subsequence, compute its sum.
   - If the sum equals K, increment the count.

3. Time Complexity  
   - O(N * 2^N), as we generate `2^N` subsequences and compute their sum in O(N).

4. Space Complexity  
   - O(1), excluding output storage.


Optimal Approach (Using Recursion)

1. Recursive Function  
   - At each step, decide whether to include the current element.

2. Base Case  
   - If we reach the end of the array:
     - If `sum == K`, return 1.
     - Else, return 0.

3. Recursive Calls  
   - Include the current element (`sum + arr[i]`).
   - Exclude the current element (`sum` remains unchanged).

4. Return the Total Count  
   - Count subsequences from both recursive calls.

5. Time Complexity  
   - O(2^N), as each element has two choices.

6. Space Complexity  
   - O(N), due to recursive call stack.

-----------------------------------------------

3) COMBINATION SUM

Problem Statement  
- Given an array of distinct integers and a target sum K, find all unique combinations where the chosen numbers sum to K.  
- Each number can be used multiple times.

Brute Force Approach (Using Power Set)

1. Generate All Subsequences  
   - Use bit manipulation or recursion to generate all possible subsequences.

2. Check Sum Condition  
   - For each subsequence, compute its sum.
   - If the sum equals K, store it.

3. Time Complexity  
   - O(N * 2^N), as we generate `2^N` subsequences and compute their sum in O(N).

4. Space Complexity  
   - O(N) for storing results (excluding recursion stack).


Optimal Approach (Using Recursion & Backtracking)

1. Recursive Function  
   - Maintain an index and current sum.
   - Try including the same element multiple times.

2. Base Case  
   - If `sum == K`, store the combination.
   - If `sum > K` or index goes out of bounds, return.

3. Recursive Calls  
   - Include `arr[i]` (keep index same, as repetition is allowed).
   - Exclude `arr[i]` (move to `i + 1` to avoid duplicate counts).

4. Time Complexity  
   - O(2^T * K), where T is the target sum and K is the average subset length.

5. Space Complexity  
   - O(K), for storing intermediate results in the recursion stack.

------------------------------------------------------------------------

4) COMBINATION SUM II (Each Number Can Be Used Only Once)

Problem Statement  
- Given a collection of integers (which may contain duplicates) and a target sum K, find all unique combinations where the chosen numbers sum to K.  
- Each number can be used **only once** in a combination.

Brute Force Approach (Generating All Subsequences)

1. Generate All Subsequences  
   - Use recursion to generate all subsets of the given array.

2. Check Sum Condition  
   - Compute the sum of each subset.
   - If the sum is equal to K, store the subset.

3. Handle Duplicates  
   - Sort the array and use a **set** to store unique subsequences.

4. Time Complexity  
   - O(2^N * N), as we generate `2^N` subsets and check their sum.

5. Space Complexity  
   - O(N) for storing subsets (excluding recursion stack).


Optimal Approach (Recursion + Backtracking with Sorting)

1. **Sort the Array**  
   - Sorting helps in **handling duplicates** efficiently.

2. **Recursive Function**  
   - Maintain an index and current sum.
   - Include `arr[i]` and move to `i + 1` (since repetition is not allowed).
   - Skip duplicate elements (`arr[i] == arr[i - 1]`) to avoid duplicate subsequences.

3. **Base Case**  
   - If `sum == K`, store the combination.
   - If `sum > K` or `index == N`, return.

4. **Time Complexity**  
   - O(2^N), as we explore subsets with pruning.

5. **Space Complexity**  
   - O(K), for recursion stack.

-----------------------------------------------------------------

5) SUBSET SUM 1

Problem Statement  
- Given an array of integers, find all possible subset sums.  
- Return the subset sums in **non-decreasing order**.

Brute Force Approach (Generating All Subsequences)

1. **Generate All Subsequences**  
   - Use recursion to generate all subsets.
   - Maintain a variable to store the sum of the current subset.

2. **Base Case**  
   - If the index reaches the end of the array, store the sum.

3. **Recursive Calls**  
   - Include the current element in the sum.
   - Exclude the current element from the sum.

4. **Sort the Result**  
   - The final output should be in non-decreasing order.

5. **Time Complexity**  
   - O(2^N + 2^N log(2^N)), as we generate `2^N` subsets and then sort them.

6. **Space Complexity**  
   - O(2^N), for storing the subset sums.

Optimal Approach (Recursion + Backtracking)

1. **Sorting Not Required**  
   - Instead of sorting, insert values in a **sorted order** while computing.

2. **Recursive Function**  
   - Keep track of the current sum and index.
   - Add sums directly to the result list.

3. **Time Complexity**  
   - O(2^N), as we generate all subsets.

4. **Space Complexity**  
   - O(N) for recursion stack.

-----------------------------------------------------
