1) COUNT DIGITS / REVERSE A NUMBER / PALINDROME

ALGORITHM
while(num)
     rem = num % 10
     rev = rev * 10 + rem
     mum = num / 10
	
TIME COMPLEXITY: O(logN)
SPACE COMPLEXITY: O(1)

----------------------------------------

2) FACTORS OF A NUMBER

ALGORITHM - BRUTE FORCE
Initialize i = 1
Loop while i <= num:
    If num % i == 0:
        i is a factor
    Increment i by 1

TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(1)

----------------------------------

ALGORITHM - OPTIMIZED
Initialize i = 1
Loop while i * i <= num:
    If num % i == 0:
        i is a factor
        If i is not equal to num / i, then num / i is also a factor
    Increment i by 1

TIME COMPLEXITY: O(√N)
SPACE COMPLEXITY: O(1)

----------------------------------------

3) PRIME NUMBERS

ALGORITHM - BRUTE FORCE
Initialize i = 2
If num < 2, then it is not prime
Loop from i = 2 up to num - 1:
    If num % i == 0:
        num is not prime
    If no divisors are found, num is prime

TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(1)

------------------------------------------------

ALGORITHM - OPTIMIZED (Up to Square Root)
If num < 2, then it is not prime
Initialize i = 2
Loop while i * i <= num:
    If num % i == 0:
        num is not prime
    Increment i by 1
If no divisors are found, num is prime

TIME COMPLEXITY: O(√N)
SPACE COMPLEXITY: O(1)

----------------------------------------------------------

ALGORITHM - SIEVE OF ERATOSTHENES (for precomputing prime numbers up to N)
Create an array isPrime of size N + 1 and initialize all entries as True
Set isPrime[0] and isPrime[1] to False (0 and 1 are not prime)
For each integer p from 2 up to √N:
    If isPrime[p] is True, mark all multiples of p (from p^2 up to N) as False
All indices remaining as True in the array isPrime represent prime numbers

TIME COMPLEXITY: O(N log(log(N)))
SPACE COMPLEXITY: O(N)

----------------------------------------

4) GCD (Greatest Common Divisor)

ALGORITHM - BRUTE FORCE
Initialize gcd = 1
Loop i from 1 to min(a, b):
    If a % i == 0 and b % i == 0:
        gcd = i
Return gcd

TIME COMPLEXITY: O(min(a, b))
SPACE COMPLEXITY: O(1)

---------------------------------------

ALGORITHM - EUCLIDEAN METHOD
While b is not zero:
    Set a = a % b
    Swap the values of a and b
Return a

TIME COMPLEXITY: O(log(min(a, b)))
SPACE COMPLEXITY: O(1)

-----------------------------------------------

ALGORITHM - EXTENDED EUCLIDEAN METHOD
If b is 0, return (a, 1, 0)
Recursively call gcd, x1, y1 = extended_euclidean(b, a % b)
Set x = y1
Set y = x1 - (a // b) * y1
Return (gcd, x, y)

TIME COMPLEXITY: O(log(min(a, b)))
SPACE COMPLEXITY: O(1)

----------------------------------------

5) PRIME FACTORS OF A NUMBER

ALGORITHM - BRUTE FORCE
Initialize i = 2
While num is greater than 1:
    If num % i == 0:
        i is a prime factor
        Divide num by i
    Else, increment i by 1

TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(1)

---------------------------------------------

ALGORITHM - OPTIMIZED
While num is divisible by 2:
    2 is a prime factor
    Divide num by 2
For each odd integer i from 3 up to √num:
    While num is divisible by i:
        i is a prime factor
        Divide num by i
If num is greater than 2 after the loop, num itself is a prime factor

TIME COMPLEXITY: O(√N)
SPACE COMPLEXITY: O(1)

----------------------------------------

6) POWER EXPONENTIATION

ALGORITHM - BRUTE FORCE
Initialize result = 1
For i from 1 to n:
    Multiply result by x
Return result

TIME COMPLEXITY: O(n)
SPACE COMPLEXITY: O(1)

------------------------------------------------

ALGORITHM - BINARY EXPONENTIATION (Exponentiation by Squaring)
Initialize result = 1
While n > 0:
    If n is odd:
        Multiply result by x
    Square x
    Divide n by 2 (integer division)
Return result

TIME COMPLEXITY: O(log n)
SPACE COMPLEXITY: O(1)








