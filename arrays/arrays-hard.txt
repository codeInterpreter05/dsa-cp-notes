1) PASCAL'S TRIANGLE  

----------------------------------------  

VARIANT 1: Find Element at Rth Row and Cth Column  

ALGORITHM - BRUTE FORCE (Binomial Coefficient)  
1. Use the formula `nCr = n! / (r! * (n - r)!)` to calculate the element.  

TIME COMPLEXITY: O(R) (since factorial calculations take linear time)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

VARIANT 2: Print the Nth Row  

ALGORITHM - BRUTE FORCE (Repeated nCr Calculation)  
1. Initialize `row = []`.  
2. Loop from `col = 0` to `N`:  
   - Compute `nCr` using factorials.  
   - Append result to `row`.  
3. Print `row`.  

TIME COMPLEXITY: O(N * R)  
SPACE COMPLEXITY: O(N)  

----------------------------------------  

ALGORITHM - OPTIMAL (Direct Multiplication)  
1. Initialize `row = [1]`.  
2. Loop from `i = 1` to `N`:  
   - Use `row[i] = row[i-1] * (N - i + 1) / i`.  
   - Append result to `row`.  
3. Print `row`.  

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(N)  

----------------------------------------  

VARIANT 3: Print Entire Pascal's Triangle  

ALGORITHM  
1. Initialize an empty list `triangle`.  
2. Loop from `i = 0` to `N-1`:  
   - Initialize `row = [1]`.  
   - Loop from `j = 1` to `i`:  
     - Calculate `row[j] = triangle[i-1][j-1] + triangle[i-1][j]`.  
   - Append `row` to `triangle`.  
3. Print `triangle`.  

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(N²)  

----------------------------------------

2) MAJORITY ELEMENTS (Appears More Than N/3 Times)   

ALGORITHM - BRUTE FORCE (Count Occurrences)  
1. Loop through the array with index `i` from 0 to N-1.  
2. For each element `arr[i]`, count its occurrences in the entire array.  
3. If the count exceeds `N/3`, mark it as a majority element.  
4. Repeat for all elements.  

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - USING MAP (HashMap for Frequency Count)  
1. Initialize an empty HashMap `freqMap` to store the frequency of each element.  
2. Traverse the array and for each element `arr[i]`, increment its count in the `freqMap`.  
3. After the traversal, iterate through the `freqMap` and check if any element has a count greater than `N/3`.  
4. If found, mark it as a majority element.  

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(N)  

----------------------------------------  

ALGORITHM - OPTIMAL (Boyer-Moore Voting Algorithm for Two Majority Elements)  
1. Initialize two variables `candidate1` and `candidate2` with None, and counters `count1` and `count2` as 0.  
2. Traverse the array:  
   - If `arr[i] == candidate1`, increment `count1`.  
   - Else if `arr[i] == candidate2`, increment `count2`.  
   - Else if `count1 == 0`, assign `candidate1 = arr[i]` and `count1 = 1`.  
   - Else if `count2 == 0`, assign `candidate2 = arr[i]` and `count2 = 1`.  
   - Else decrement both `count1` and `count2`.  
3. After the traversal, verify if `candidate1` and `candidate2` appear more than `N/3` times by counting their occurrences in the array.  

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

3) 3 SUM PROBLEM  

ALGORITHM - BRUTE FORCE (Three Loops)  
1. Loop through the array with index `i` from 0 to N-1 (first element).  
2. For each element `arr[i]`, loop through the array with index `j` from `i+1` to N-1 (second element).  
3. For each pair `(arr[i], arr[j])`, loop through the array with index `k` from `j+1` to N-1 (third element).  
4. If `arr[i] + arr[j] + arr[k] == 0`, add the triplet `(arr[i], arr[j], arr[k])` to the result.  
5. Return all unique triplets.  

TIME COMPLEXITY: O(N³)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - BETTER (Two Loops with Sorting)  
1. Sort the array.  
2. Loop through the array with index `i` from 0 to N-1 (first element).  
3. If `arr[i] == arr[i-1]`, skip to the next element to avoid duplicate triplets.  
4. Use two pointers `left` and `right`, initialized to `i+1` and `N-1` respectively, to find pairs where `arr[i] + arr[left] + arr[right] == 0`.  
   - If the sum is less than 0, increment `left`.  
   - If the sum is greater than 0, decrement `right`.  
   - If the sum equals 0, add the triplet `(arr[i], arr[left], arr[right])` to the result.  
   - Move the `left` pointer to the next different element, and the `right` pointer to the previous different element to avoid duplicates.  
5. Return all unique triplets.  

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - OPTIMAL (Two Pointers + Sorting)  
1. Sort the array.  
2. Loop through the array with index `i` from 0 to N-1 (first element).  
3. For each element `arr[i]`, use two pointers:  
   - `left = i + 1`, and `right = N-1`.  
   - While `left < right`, calculate the sum: `sum = arr[i] + arr[left] + arr[right]`.  
   - If `sum == 0`, add the triplet `(arr[i], arr[left], arr[right])` to the result, and increment `left` and decrement `right`.  
   - If `sum < 0`, increment `left` to increase the sum.  
   - If `sum > 0`, decrement `right` to decrease the sum.  
   - Skip duplicates by incrementing `left` and decrementing `right` when necessary.  
4. Return all unique triplets.  

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - USING HASHING (HashSet)  
1. Sort the array.  
2. Loop through the array with index `i` from 0 to N-1 (first element).  
3. For each element `arr[i]`, initialize a HashSet to store visited elements for the pair search.  
4. For each element `arr[i]`, check if there exists a pair `(arr[j], arr[k])` such that `arr[i] + arr[j] + arr[k] == 0`.  
   - Traverse the subarray `arr[i+1...N-1]`.  
   - For each `arr[j]`, calculate `target = -arr[i] - arr[j]`.  
   - If `target` exists in the HashSet, add the triplet `(arr[i], arr[j], target)` to the result.  
   - If not, add `arr[j]` to the HashSet.  
5. Return all unique triplets.  

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(N)  

----------------------------------------  

4) 4 SUM PROBLEM    

ALGORITHM - BRUTE FORCE (Four Loops)  
1. Loop through the array with index `i` from 0 to N-1 (first element).  
2. For each element `arr[i]`, loop through the array with index `j` from `i+1` to N-1 (second element).  
3. For each pair `(arr[i], arr[j])`, loop through the array with index `k` from `j+1` to N-1 (third element).  
4. For each triplet `(arr[i], arr[j], arr[k])`, loop through the array with index `l` from `k+1` to N-1 (fourth element).  
5. If `arr[i] + arr[j] + arr[k] + arr[l] == 0`, add the quadruple `(arr[i], arr[j], arr[k], arr[l])` to the result.  
6. Return all unique quadruples.  

TIME COMPLEXITY: O(N⁴)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - BETTER (Sorting + Two Pointers)  
1. Sort the array.  
2. Loop through the array with index `i` from 0 to N-4 (first element).  
3. If `arr[i] == arr[i-1]`, skip to the next element to avoid duplicate quadruples.  
4. Loop through the array with index `j` from `i+1` to N-3 (second element).  
5. If `arr[j] == arr[j-1]`, skip to the next element to avoid duplicate quadruples.  
6. Use two pointers `left` and `right`, initialized to `j+1` and `N-1` respectively, to find pairs where `arr[i] + arr[j] + arr[left] + arr[right] == 0`.  
   - If the sum is less than 0, increment `left`.  
   - If the sum is greater than 0, decrement `right`.  
   - If the sum equals 0, add the quadruple `(arr[i], arr[j], arr[left], arr[right])` to the result.  
   - Move the `left` pointer to the next different element, and the `right` pointer to the previous different element to avoid duplicates.  
7. Return all unique quadruples.  

TIME COMPLEXITY: O(N³)  
SPACE COMPLEXITY: O(1)  

----------------------------------------  

ALGORITHM - USING HASHSET (Optimal with HashSet for Uniqueness)  
1. Sort the array.  
2. Create an empty HashSet `resultSet` to store unique quadruples.  
3. Loop through the array with index `i` from 0 to N-1 (first element).  
4. For each element `arr[i]`, loop through the array with index `j` from `i+1` to N-1 (second element).  
5. Calculate the target sum `target = -(arr[i] + arr[j])`.  
6. Use a HashSet `seen` to track the elements we have already checked.  
7. Loop through the array from index `j+1` to N-1 to check for pairs that sum to `target`.  
   - If the current element is already in the `seen` set, add the quadruple `(arr[i], arr[j], arr[left], arr[right])` to `resultSet`.  
   - Otherwise, add the current element to the `seen` set.  
8. Continue the process for all combinations of `i` and `j`.  
9. Convert the HashSet `resultSet` to a list and return all unique quadruples.  

TIME COMPLEXITY: O(N³)  
SPACE COMPLEXITY: O(N)  

-----------------------------------------------------------

5) COUNT SUBARRAYS WITH XOR K 

ALGORITHM - BRUTE FORCE (Three Loops)

1. Initialize `count = 0`.
2. Use three nested loops:
   - Outer loop `i` from `0` to `N-1` (starting index).
   - Middle loop `j` from `i` to `N-1` (ending index).
   - Inner loop `k` from `i` to `j`:
     * XOR all elements from `arr[k]` to `arr[j]`.
     * If the XOR equals `K`, increment `count`.
3. Return `count`.

TIME COMPLEXITY: O(N³)  
SPACE COMPLEXITY: O(1)

---------------------------------------------------

ALGORITHM - BETTER (Two Loops)

1. Initialize `count = 0`.
2. Use two nested loops:
   - Outer loop `i` from `0` to `N-1` (starting index).
   - Initialize `currentXOR = 0`.
   - Inner loop `j` from `i` to `N-1` (ending index):
     * XOR `arr[j]` with `currentXOR`.
     * If `currentXOR == K`, increment `count`.
3. Return `count`.

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(1)

------------------------------------------------------

ALGORITHM - OPTIMAL (Prefix XOR + HashMap)

1. Initialize `count = 0` and `prefixXOR = 0`.
2. Create a HashMap `prefixMap` with default value `0`.
3. Traverse the array:
   - XOR `arr[i]` with `prefixXOR`.
   - If `prefixXOR == K`, increment `count`.
   - If `(prefixXOR ^ K)` exists in `prefixMap`, add its frequency to `count`.
   - Increment `prefixMap[prefixXOR]`.
4. Return `count`.

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(N)

----------------------------------------------------------

6) MERGE OVERLAPPING INTERVALS

ALGORITHM - BRUTE FORCE (Check Pairwise Overlaps)

1. Sort the intervals based on their starting time.
2. For each interval, compare it with all others to check for overlaps:
   - If `interval[i].end >= interval[j].start`, merge the intervals.
   - Update the `start` and `end` values of the merged interval accordingly.
3. Continue until all overlaps are resolved.
4. Return the list of merged intervals.

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(N) (to store merged intervals)

---------------------------------------------------

ALGORITHM - OPTIMAL (Sorting + Iterative Merge)

1. Sort the intervals based on their starting time.
2. Initialize an empty `merged` list.
3. Traverse the sorted intervals:
   - If `merged` is empty or the current interval does not overlap with the last interval in `merged`, add the current interval to `merged`.
   - Else, update the end time of the last interval in `merged` to the maximum end time of the overlapping intervals.
4. Return the `merged` list.

TIME COMPLEXITY: O(N log N) (due to sorting)  
SPACE COMPLEXITY: O(N) (to store merged intervals)

--------------------------------------------------------------

7) MERGE TWO SORTED ARRAYS WITHOUT EXTRA SPACE

ALGORITHM - BRUTE FORCE (Using Third Array + Sort)

1. Create a third array `result[]` of size `N + M`.
2. Copy all elements of the first array `arr1[]` into `result[]`.
3. Copy all elements of the second array `arr2[]` into `result[]`.
4. Sort the `result[]` array.
5. Copy the first `N` elements into `arr1[]` and the remaining `M` elements into `arr2[]`.

TIME COMPLEXITY: O((N + M) * log(N + M))  
SPACE COMPLEXITY: O(N + M)

----------------------------------------------------------------

ALGORITHM - BETTER (Using Two Pointers in a Third Array)

1. Create a third array `result[]` of size `N + M`.
2. Initialize two pointers:  
   - `i = 0` (pointing to the first array).  
   - `j = 0` (pointing to the second array).  
3. Traverse both arrays:  
   - If `arr1[i] <= arr2[j]`, add `arr1[i]` to `result[]` and increment `i`.
   - Else, add `arr2[j]` to `result[]` and increment `j`.
4. Copy any remaining elements of `arr1[]` or `arr2[]` into `result[]`.
5. Copy the first `N` elements into `arr1[]` and the remaining `M` elements into `arr2[]`.

TIME COMPLEXITY: O(N + M)  
SPACE COMPLEXITY: O(N + M)

------------------------------------------------------------------

ALGORITHM - BETTER (Insertion Sort on the Two Arrays)

1. Start traversing `arr1[]` from the beginning and `arr2[]` from the end.
2. For every element in `arr1[]`, compare it with the smallest element in `arr2[]`.
3. If `arr1[i] > arr2[0]`, swap the elements.
4. After swapping, sort `arr2[]` to place the smallest element at the start.

TIME COMPLEXITY: O(N * M)  
SPACE COMPLEXITY: O(1)

------------------------------------------------------------------

ALGORITHM - OPTIMAL (Gap Method) (Shell Sort)

1. Combine both arrays conceptually into a single array of size `N + M`.
2. Initialize the gap as `(N + M) / 2` and reduce it by half in every iteration.
3. Compare elements in the two arrays separated by the gap:
   - If the element in `arr1[]` is greater than `arr2[]`, swap them.
   - Adjust the pointers for the next comparison based on the gap.
4. Repeat until the gap becomes 0.

TIME COMPLEXITY: O((N + M) * log(N + M))  
SPACE COMPLEXITY: O(1)

-----------------------------------------------------------------------

8) FIND THE REPEATING AND MISSING NUMBER

ALGORITHM - BRUTE FORCE (Nested Loops - O(N²))

1. Initialize variables `missing` and `repeating` to -1.
2. Use two nested loops:
   - Outer loop `i` from 1 to N:
     - Count the occurrences of `i` in the array using the inner loop.
     - If `count == 0`, it is the missing number.
     - If `count > 1`, it is the repeating number.
3. Return the `missing` and `repeating` numbers.

TIME COMPLEXITY: O(N²)  
SPACE COMPLEXITY: O(1)

-----------------------------------------------------------------

ALGORITHM - BRUTE FORCE (Using Sorting - O(N * log N))

1. Sort the array.
2. Traverse the sorted array:
   - Check if the difference between consecutive elements is greater than 1.
   - If yes, identify the missing number.
   - If two consecutive elements are the same, identify the repeating number.
3. Handle edge cases (e.g., missing or repeating number at the ends).

TIME COMPLEXITY: O(N * log N) (due to sorting)  
SPACE COMPLEXITY: O(1)

-----------------------------------------------------------------

ALGORITHM - BETTER (Using Frequency Array)

1. Create a frequency array `freq[]` of size N initialized to 0.
2. Traverse the input array:
   - Increment `freq[arr[i]]` for each element in the array.
3. Traverse the frequency array:
   - If `freq[i] == 0`, it is the missing number.
   - If `freq[i] > 1`, it is the repeating number.

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(N)

---------------------------------------------------------------------

ALGORITHM - OPTIMAL (Mathematical Approach)

1. Calculate the sum and sum of squares of the first N natural numbers:
   - `Sum_N = N * (N + 1) / 2`
   - `Sum_Squares_N = N * (N + 1) * (2 * N + 1) / 6`
2. Calculate the sum and sum of squares of the elements in the array:
   - `Sum_Array = Σ(arr[i])`
   - `Sum_Squares_Array = Σ(arr[i]²)`
3. Use the equations to find the repeating and missing numbers:
   - Let `X` = Missing Number and `Y` = Repeating Number.
   - `X - Y = Sum_N - Sum_Array`
   - `X² - Y² = Sum_Squares_N - Sum_Squares_Array`
   - Solve for `X` and `Y`.

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(1)

------------------------------------------------------------------

ALGORITHM - OPTIMAL (Using XOR)

1. Initialize `XOR = 0` and calculate `XOR` for all elements in the array and all numbers from 1 to N.
2. The result of `XOR` will be `X ^ Y` (missing number XOR repeating number).
3. Find the rightmost set bit in `XOR`.
4. Divide the array and range 1 to N into two groups based on this bit and calculate XOR for each group.
5. The two results are the missing and repeating numbers.

TIME COMPLEXITY: O(N)  
SPACE COMPLEXITY: O(1)
