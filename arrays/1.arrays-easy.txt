1) MAX SIZE OF AN ARRAY

INSIDE int main() - 10 ^ 6
OUTSIDE int main() - 10 ^ 7

-----------------------------------------------

2) FIND LARGEST ELEMENT IN AN ARRAY  

ALGORITHM - BRUTE FORCE  
1. Sort the array in ascending order.  
2. Return the last element of the sorted array.  

TIME COMPLEXITY:  
- Sorting: O(N log N)  
- Accessing the last index: O(1)  
- Overall: O(N log N)  

SPACE COMPLEXITY:  
- Sorting typically requires extra memory: O(N).  


ALGORITHM - OPTIMAL  
1. Initialize `maxElement` to a very small value (e.g., -∞).  
2. Loop through each element in the array:  
   - Compare the current element with `maxElement`.  
   - If the current element is larger, update `maxElement`.  
3. After the loop, `maxElement` will hold the largest value.  

TIME COMPLEXITY:  
- Iterating through the array: O(N)  
- Overall: O(N).  

SPACE COMPLEXITY:  
- In-place comparison: O(1).  

----------------------------------------  

3) CHECK IF THE ARRAY IS SORTED  

ALGORITHM - BRUTE FORCE / OPTIMAL 
1. Iterate through the array from the first element to the second last element.  
2. Compare each element with the next element:  
   - If any element is greater than the next element, the array is not sorted.  
3. If the loop completes without finding any unsorted pair, the array is sorted.  

TIME COMPLEXITY:  
- Iterating through the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- In-place comparison: O(1).  

----------------------------------------  

4) REMOVE DUPLICATES FROM SORTED ARRAY  

ALGORITHM - BRUTE FORCE  
1. Use a set to store the unique elements.  
2. Iterate through the array, adding each element to the set.  
3. The set will automatically handle duplicates, leaving only unique elements.  
4. Finally, return the set as the new array or convert the set back to an array.

TIME COMPLEXITY:  
- Iterating through the array: O(N)  
- Insertion into set (if sorted set): O(log N)  
- Overall (with sorted set): O(N log N)  
- If using hash set: O(1) on average for insertion, so overall is O(N).  

SPACE COMPLEXITY:  
- Space for the set: O(N).  


ALGORITHM - OPTIMAL  
1. Initialize two pointers:  
   - `i` (slow pointer) starts at the beginning of the array.  
   - `j` (fast pointer) iterates through the array.  
2. Compare the element at `arr[i]` with `arr[j]`.  
   - If they are different, increment `i` and set `arr[i] = arr[j]`.  
   - If they are the same, just move `j` to the next element.  
3. The array up to index `i` will contain only unique elements.  

TIME COMPLEXITY:  
- Iterating through the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- No extra space required: O(1).  

----------------------------------------  

5) ROTATE ARRAY BY K POSITIONS  

ALGORITHM - BRUTE FORCE (Using a Temporary Array)  
1. Create a temporary array of the same size as the original array.  
2. Copy the last `k` elements of the original array into the beginning of the temporary array.  
3. Copy the remaining `n - k` elements of the original array into the end of the temporary array.  
4. Copy the elements from the temporary array back into the original array.  

TIME COMPLEXITY:  
- Copying elements to the temporary array: O(N)  
- Copying back to the original array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- Space for the temporary array: O(N).  


ALGORITHM - OPTIMAL (Reversal Algorithm)  
1. Normalize `k` to ensure it’s within the bounds of the array size (`k = k % n`), where `n` is the length of the array.  
2. Reverse the entire array.  
3. Reverse the first `k` elements.  
4. Reverse the remaining `n - k` elements.  

TIME COMPLEXITY:  
- Reversing the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- In-place reversal: O(1).  

----------------------------------------  

6) MOVE ALL ZEROES TO THE END OF AN ARRAY WHILE MAINTAINING THE ORDER  

ALGORITHM - BRUTE FORCE (Using Extra Array)  
1. Create a temporary array.  
2. Traverse the original array:  
   - If an element is non-zero, copy it to the temporary array.  
3. After the traversal, fill the remaining positions in the temporary array with zeroes.  
4. Copy the temporary array back to the original array.  

TIME COMPLEXITY:  
- Traversing the array: O(N)  
- Copying back: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- Temporary array: O(N).  

----------------------------------------  

ALGORITHM - OPTIMAL (Two-Pointer Approach)  
1. Initialize a pointer `j = 0` to track the position of the next non-zero element.  
2. Traverse the array with a pointer `i`:  
   - If `arr[i]` is non-zero, swap `arr[i]` with `arr[j]` and increment `j`.  
3. The array will have all non-zero elements in their original order, followed by all zeroes.  

TIME COMPLEXITY:  
- Traversing the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- In-place swapping: O(1).  

----------------------------------------  

7) LINEAR SEARCH  

ALGORITHM - BRUTE FORCE (Iterative Approach)  
1. Initialize an index `i = 0`.  
2. Traverse the array from the first element to the last:  
   - If the current element equals the target, return its index.  
3. If the target is not found after the traversal, return -1.  

TIME COMPLEXITY:  
- Best Case: O(1) (if the element is found at the first position).  
- Worst Case: O(N) (if the element is not found or is at the last position).  
- Average Case: O(N).  

SPACE COMPLEXITY:  
- No extra space used: O(1).  

----------------------------------------  

8) UNION OF TWO SORTED ARRAYS  

ALGORITHM - BRUTE FORCE (Using a Set)  
1. Insert all elements from the first array into a set.  
2. Insert all elements from the second array into the same set.  
3. Convert the set back into a sorted list to get the union.  

TIME COMPLEXITY:  
- Inserting elements into the set: O(M + N)  
- Sorting the set: O((M + N) log(M + N))  
- Overall: O((M + N) log(M + N))  

SPACE COMPLEXITY:  
- Extra space for the set: O(M + N).  

----------------------------------------  

ALGORITHM - OPTIMAL (Two-Pointer Approach)  
1. Initialize two pointers `i = 0` and `j = 0`.  
2. Traverse both arrays:  
   - If `arr1[i] < arr2[j]`, add `arr1[i]` to the result and increment `i`.  
   - If `arr1[i] > arr2[j]`, add `arr2[j]` to the result and increment `j`.  
   - If both are equal, add either one and increment both `i` and `j`.  
3. Add the remaining elements from either array to the result.  

TIME COMPLEXITY:  
- Traversing both arrays: O(M + N)  
- Overall: O(M + N)  

SPACE COMPLEXITY:  
- Extra space for the result array: O(M + N).  

----------------------------------------  

9) INTERSECTION OF TWO SORTED ARRAYS  

ALGORITHM - BRUTE FORCE (Using a Set)  
1. Create a set from the first array.  
2. Traverse the second array:  
   - If an element exists in the set, add it to the result and remove it from the set (to avoid duplicates).  

TIME COMPLEXITY:  
- Inserting elements into the set: O(M)  
- Checking and removing elements: O(N)  
- Overall: O(M + N)  

SPACE COMPLEXITY:  
- Extra space for the set: O(M).  

----------------------------------------  

ALGORITHM - OPTIMAL (Two-Pointer Approach)  
1. Initialize two pointers `i = 0` and `j = 0`.  
2. Traverse both arrays while `i < M` and `j < N`:  
   - If `arr1[i] < arr2[j]`, increment `i`.  
   - If `arr1[i] > arr2[j]`, increment `j`.  
   - If both are equal:  
     - Add the element to the result if it’s not a duplicate.  
     - Increment both `i` and `j`.  

TIME COMPLEXITY:  
- Traversing both arrays: O(M + N)  
- Overall: O(M + N)  

SPACE COMPLEXITY:  
- Extra space for the result array: O(M + N).  

----------------------------------------  

10) INTERSECTION OF TWO ARRAYS  

ALGORITHM - BRUTE FORCE (Nested Loop)  
1. Initialize an empty result array.  
2. Traverse the first array:  
   - For each element, check if it exists in the second array using a nested loop.  
   - If found, add it to the result and mark it as visited to avoid duplicates.  

TIME COMPLEXITY:  
- Traversing both arrays: O(M * N)  

SPACE COMPLEXITY:  
- Extra space for the result array: O(M + N).  

----------------------------------------  

ALGORITHM - OPTIMAL (Using Hash Set)  
1. Create a hash set from the first array.  
2. Initialize an empty result set.  
3. Traverse the second array:  
   - If an element exists in the hash set, add it to the result set and remove it from the hash set (to avoid duplicates).  
4. Convert the result set to a list/array.  

TIME COMPLEXITY:  
- Inserting elements into the hash set: O(M)  
- Checking and removing elements: O(N)  
- Overall: O(M + N)  

SPACE COMPLEXITY:  
- Extra space for hash sets: O(M + N).  

----------------------------------------  

11) FIND MISSING NUMBER IN AN ARRAY  

ALGORITHM - BRUTE FORCE (Using Sorting)  
1. Sort the array.  
2. Traverse the array from index `i = 0` to `n-1`:  
   - If `arr[i] != i + 1`, return `i + 1` as the missing number.  
3. If no missing number is found, return `n + 1`.  

TIME COMPLEXITY:  
- Sorting the array: O(N logN)  
- Traversal: O(N)  
- Overall: O(N logN)  

SPACE COMPLEXITY:  
- Extra space for sorting: O(1) or O(N) depending on the sorting algorithm.  

----------------------------------------  

ALGORITHM - OPTIMAL (Using Sum Formula)  
1. Calculate the expected sum using the formula:  
   - `ExpectedSum = n * (n + 1) / 2`  
2. Calculate the actual sum of elements in the array:  
   - `ActualSum = sum(arr)`  
3. The missing number is:  
   - `MissingNumber = ExpectedSum - ActualSum`  

TIME COMPLEXITY:  
- Calculating the sum: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- No extra space used: O(1).  

----------------------------------------  

ALGORITHM - OPTIMAL (Using XOR)  
1. Initialize `xor1 = 0` and `xor2 = 0`.  
2. XOR all elements of the array:  
   - `xor1 = arr[0] ^ arr[1] ^ ... ^ arr[n-1]`  
3. XOR all numbers from `1` to `n`:  
   - `xor2 = 1 ^ 2 ^ ... ^ n`  
4. The missing number is:  
   - `MissingNumber = xor1 ^ xor2`  

TIME COMPLEXITY:  
- Traversing the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- No extra space used: O(1).  

----------------------------------------  

12) FIND THE NUMBER THAT APPEARS ONCE WHILE EVERY OTHER NUMBER APPEARS TWICE  

ALGORITHM - BRUTE FORCE (Using Frequency Map)  
1. Create a hash map (or dictionary) to store the frequency of each element.  
2. Traverse the array and update the hash map.  
3. Traverse the hash map to find the element with a frequency of 1.  

TIME COMPLEXITY:  
- Traversing the array: O(N)  
- Traversing the hash map: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- Extra space for the hash map: O(N).  

----------------------------------------  

ALGORITHM - OPTIMAL (Using XOR)  
1. Initialize `result = 0`.  
2. Traverse the array:  
   - XOR each element with `result`:  
     `result = result ^ arr[i]`  
3. After the loop, `result` will hold the unique element since:  
   - `x ^ x = 0` for duplicate elements  
   - `x ^ 0 = x` for the unique element.  

TIME COMPLEXITY:  
- Traversing the array: O(N)  
- Overall: O(N)  

SPACE COMPLEXITY:  
- No extra space used: O(1).  

----------------------------------------  









